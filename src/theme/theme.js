/* eslint-disable no-underscore-dangle */
// The default theme.js for Paragon. The structure of this object follows the
// theme specification found here: https://system-ui.com/theme/. We prefer to add
// to this theme over time rather than all valid keys at once to ensure everything
// present here is used in the system.

// Color system
const colors = {
  white: '#fff',
  gray100: '#ebebeb',
  gray200: '#cccccc',
  gray300: '#adadad',
  gray400: '#8f8f8f',
  gray500: '#707070',
  gray600: '#5c5c5c',
  gray700: '#454545',
  gray800: '#333333',
  gray900: '#212529',
  black: '#000',

  blue: '#23419f',
  red: '#C32D3A',
  yellow: '#ffd900',
  green: '#178253',
  teal: '#006DAA',
};
colors.gray = colors.gray500;
colors.darkGray = colors.gray700;

const themeColors = {
  primary: '#0A3055',
  secondary: colors.gray700,
  brand: '#9D0054',
  success: colors.green,
  info: colors.teal,
  danger: colors.red,
  warning: colors.yellow,
  light: '#E1DDDB',
  gray: colors.gray,
  dark: '#273F2F',
  accentA: '#00BBF9',
  accentB: '#FFEE88',
};

const _mix = (c1, c2, perc) => `mix(${c1}, ${c2}, ${perc}%`;
const _blackMix = (color, perc) => _mix(
  colors.black, colors[color], perc,
);
const _whiteMix = (color, perc) => _mix(
  colors.white, colors[color], perc,
);
const genColorLevels = (colorKey) => ({
  [`${colorKey}100`]: _whiteMix(colorKey, 94),
  [`${colorKey}200`]: _whiteMix(colorKey, 75),
  [`${colorKey}300`]: _whiteMix(colorKey, 50),
  [`${colorKey}400`]: _whiteMix(colorKey, 25),
  [`${colorKey}500`]: colors[colorKey],
  [`${colorKey}600`]: _blackMix(colorKey, 10),
  [`${colorKey}700`]: _blackMix(colorKey, 20),
  [`${colorKey}800`]: _blackMix(colorKey, 25),
  [`${colorKey}900`]: _blackMix(colorKey, 30),
});
const themeColorLevels = {
  ...genColorLevels('primary'),
  ...genColorLevels('secondary'),
  ...genColorLevels('brand'),
  ...genColorLevels('success'),
  ...genColorLevels('info'),
  ...genColorLevels('warning'),
  ...genColorLevels('danger'),
  ...genColorLevels('light'),
  ...genColorLevels('dark'),
};

const elementColorLevels = {
  background: 100,
  disabledBorder: 100,
  border: 200,
  icon: 300,
  activeBorder: 300,
  focus: 300,
  graphic: 300,
  default: 500,
  lightText: 500,
  hover: 700,
  text: 700,
  active: 900,
  darkText: 900,
};

// Set a specific jump point for requesting color jumps
const themeColorInterval = '8%';

/**
 * getThemeColor
 * Request a theme color. Now with a variant option.
 * A supplied variant can be a string from the
 * element-color-levels map or a number directly from
 * the color-levels map.
 *
 * The returned value is either a set value contained in
 * the themeColorLevels map or generated by the
 * colorLevel's parameters
 *
 * @param {string='primary'} colorName
 * @param {string='default} variant
 * @return {string}
 */
const getThemeColor = (
  colorName = 'primary',
  variant = 'default',
  theme,
) => {
  let _themeColors;
  let _elementColorLevels;
  if (theme === undefined) {
    _themeColors = themeColors;
    _elementColorLevels = elementColorLevels;
  } else {
    _themeColors = theme.themeColors;
    _elementColorLevels = theme.elementColorLevels;
  }

  let baseColor = '#808080';
  let colorLevel = 500;
  if (_themeColors[colorName] !== undefined) {
    baseColor = _themeColors[colorName];
  }
  if (!Number.isNaN(variant)) {
    colorLevel = variant;
  } else if (_elementColorLevels[variant] !== undefined) {
    colorLevel = _elementColorLevels[variant];
  }
  const themeKey = `#${colorName}-#${colorLevel}`;
  if (themeColorLevels[themeKey] !== undefined) {
    return themeColorLevels[themeKey];
  }
  return baseColor;
};

const yiq = {
  // The yiq lightness value that determines when the lightness of color
  // changes from 'dark' to 'light'.
  // Acceptable values are between 0 and 255.
  contrastedThreshold: 150,
  // Customize the light and dark text colors for use in our YIQ color
  // contrast function.
  textDark: getThemeColor('gray', 'text'),
  textLight: colors.white,
};

// Options
//
// Quickly modify global styling by enabling or disabling optional features.
const options = {
  enable: {
    caret: true,
    rounded: true,
    shadows: false,
    gradients: false,
    transitions: true,
    prefersReducedMotionMediaQuery: true,
    hoverMediaQuery: false, // Deprecated, no longer affects any compiled CSS
    gridClasses: true,
    pointerCursorForButtons: true,
    printStyles: true,
    responsiveFontSizes: false,
    validationIcons: false,
    deprecationMessages: true,
  },
};

// Spacing
//
// Control the default styling of most Bootstrap elements by modifying these
// variables. Mostly focused on spacing.
// You can add more entries to the spacers map, should you need more variation.
const spacer = '1rem';
const spacers = {
  0: 0,
  1: `(${spacer} * .25)`,
  2: `(${spacer} * .5)`,
  3: spacer,
  4: `(${spacer} * 1.5)`,
  5: `(${spacer} * 3)`,
};

// Body
//
// Settings for the `<body>` element.
const body = {
  bg: colors.white,
  color: colors.gray700,
};

// Links
//
// Style anchor elements.
const link = {
  color: colors.info500,
  decoration: 'none',
  hoverDecoration: 'underline',
  hoverColor: `darken(${colors.info500}, 15%)`,
  inline: {
    color: colors.info500,
    decoration: 'underline',
    hoverDecoration: 'underline',
    decorationColor: `rgba(${colors.info500}, .3)`,
    hoverColor: `darken(${colors.info500}, 15%)`,
  },
  muted: {
    color: colors.primary500,
    decoration: 'none',
    hoverColor: `darken(${colors.primary500}, 15%)`,
    hoverDecoration: 'underline',
  },
  mutedInline: {
    color: colors.primary500,
    decoration: 'underline',
    decorationColor: `rgba(${colors.primary500}, .3)`,
    hoverColor: `darken(${colors.primary500}, 15%)`,
    hoverDecoration: 'underline',
  },
  // Darken percentage for links with `.text-*` class
  // (e.g. `.text-success`)
  emphasized: {
    hoverDarkenPercentage: '15%',
  },
};
link.inline.hoverDecorationColor = `rgba(${link.inline.hoverColor}, 1)`;
link.mutedInline.hoverDecorationColor = (
  `rgba(${link.mutedInline.hoverColor}, 1)`
);

// Grid columns
//
// Set the number of columns and specify the width of the gutters.
const grid = {
  columns: 12,
  gutterWidth: '30px',
  rowColumns: 6,

  // Grid breakpoints
  //
  // Define the minimum dimensions at which your layout will change,
  // adapting to different screen sizes, for use in media queries.
  // Note:must ascend and start at 0.
  breakpoints: {
    xs: 0,
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  },

  // Grid containers
  //
  // Define the maximum width of `.container` for different screen sizes.
  // Note: must ascend
  containerMaxWidths: {
    sm: '540px',
    md: '720px',
    lg: '960px',
    xl: '1600px',
  },
  maxWidth: {
    xs: '464px',
    sm: '708px',
    md: '952px',
    lg: '1196px',
    xl: '1440px',
  },
};

// Components
//
// Define common padding and border radius sizes and more.
const component = {
  border: {
    width: '1px',
    color: getThemeColor('gray', 'border'),
    radius: '0.375rem',
    radiusLg: '0.425rem',
    radiusSm: '0.25rem',
  },
  roundedPill: '50rem',
  boxShadowSm: '0 0.0625rem 0.125rem rgba(black, 0.2)',
  boxShadow: '0 0.125rem 0.25rem rgba(black, 0.3)',
  boxShadowLg: '0 0.25rem 0.5rem rgba(black, 0.3)',

  active: {
    color: colors.white,
    bg: getThemeColor('primary'),
  },

  caret: {
    width: '.3em',
    verticalAlign: '.3em * .85',
    spacing: '.3em * .85',
  },

  transition: {
    base: 'all .2s ease-in-out',
    fade: 'opacity .15s linear',
    collapse: 'height .35s ease',
  },
};

/**
 *  Not sure how or if to pull this over.
const embedResponsiveAspectRatios: [
    (21 9),
    (16 9),
    (4 3),
    (1 1),
];
*/

// Typography
//
// Font, line-height, and color for body text, headings, and more.
const text = {
  muted: getThemeColor('gray', 'light-text'),
  lineHeight: {
    base: 1.55555555555555,
    lg: 1.5,
    sm: 1.5,
  },
  fontFamily: {
    sansSerif: [
      '-apple-system',
      'BlinkMacSystemFont',
      'Segoe UI',
      'Roboto',
      'Helvetica Neue',
      'Arial',
      'Noto Sans',
      'sans-serif',
      'Apple Color Emoji',
      'Segoe UI Emoji',
      'Segoe UI Symbol',
      'Noto Color Emoji',
    ],
    serif: 'serif',
    monospace: [
      'SFMono-Regular',
      'Menlo',
      'Monaco',
      'Consolas',
      'Liberation Mono',
      'Courier New',
      'monospace',
    ],
  },
  fontWeight: {
    lighter: 'lighter',
    weightLight: 300,
    normal: 400,
    semiBold: 500,
    bold: 700,
    bolder: 'bolder',
  },
  fontSize: {
    sm: '0.875rem',
    base: '1.125rem',
    lg: '1.125rem * 1.25',

    percent: {
      // was small-font-size
      sm: '87.5%',
      // was x-small-font-size
      xsm: '75%',
    },

    h1: '2.5rem',
    h2: '2rem',
    h3: '1.375rem',
    h4: '1.125rem',
    h5: '.875rem',
    h6: '.75rem',
  },
  display: {
    1: {
      size: '3.75rem',
      weight: 700,
    },
    2: {
      size: '4.875rem',
      weight: 700,
    },
    3: {
      size: '5.625rem',
      weight: 700,
    },
    4: {
      size: '7.5rem',
      weight: 700,
    },
    lineHeight: 1.0,
  },
  hr: {
    borderColor: 'rgba(black, .1)',
    borderWidth: component.border.width,
    marginY: spacer,
  },
  mark: {
    padding: '.2em',
    bg: '#fff243',
  },
  list: {
    inlinePadding: '.5rem',
  },
  label: {
    marginBottom: '.5rem',
  },
};
text.fontFamily.base = text.fontFamily.sansSerif;
text.fontWeight.base = text.fontWeight.normal;
text.mobile = {
  h1: '2.25rem',
  h2: text.fontSize.h2,
  h3: text.fontSize.h3,
  h4: text.fontSize.h4,
  h5: text.fontSize.h5,
  h6: text.fontSize.h6,
};
text.headings = {
  marginBottom: spacers['2'],
  fontFamily: 'null',
  fontWeight: text.fontWeight.bold,
  lineHeight: 1.25,
  color: colors.black,
};
text.lead = {
  fontSize: `${text.fontSize.base} * 1.25`,
  fontWeight: 'null',
};
text.blockQuote = {
  small: {
    color: getThemeColor('gray', 'light-text'),
    fontSize: text.fontSize.percent.sm,
  },
  fontSize: `${text.fontSize.base} * 1.25`,
};
text.dt = {
  fontWeight: text.fontWeight.bold,
};
text.table = {
  cellPadding: '.75rem',
  cellPaddingSm: '.3rem',
  captionColor: text.muted,
  borderColor: component.border.color,
  th: {
    fontWeight: 'null',
  },
};

// Z-index master list
//
// Warning: Avoid customizing these values. They're used for a bird's eye view
// of components dependent on the z-axis and are designed to all work together.
const zIndex = {
  dropdown: 1000,
  sticky: 1020,
  fixed: 1030,
  sheetBackdrop: 1031,
  sheet: 1032,
  modalBackdrop: 1040,
  modal: 1050,
  popover: 1060,
  tooltip: 1070,
};

// Buttons + Forms
//
// Shared variables that are reassigned to `input-` and `btn-` specific variables.
const inputBtn = {
  paddingY: '0.5625rem',
  paddingX: '1rem',
  fontFamily: 'null',
  fontSize: '1.125rem',
  lineHeight: 1.3333,

  focusWidth: '1px',
  focusColor: component.active.bg,
  focusBoxShadow: `0 0 0 1px ${component.active.bg}`,

  sm: {
    paddingY: '0.4375rem',
    paddingX: '0.75rem',
    fontSize: '0.875rem',
    lineHeight: '1.42858',
  },
  lg: {
    paddingY: '0.6875rem',
    paddingX: '1.25rem',
    fontSize: '1.325rem',
    lineHeight: text.lineHeight.lg,
  },
  borderWidth: component.border.width,
};

// Utilities
/*
const displays = [
  'none',
  'inline',
  'inline-block',
  'block',
  'table',
  'table-row',
  'table-cell',
  'flex',
  'inline-flex',
];

const overflows = ['auto', 'hidden'];
const positions = ['static', 'relative', 'absolute', 'fixed', 'sticky'];
const userSelects = ['all', 'auto', 'none'];
*/

// List group
const listGroup = {
  color: 'null',
  bg: colors.white,
  borderColor: 'rgba(black, .125)',
  borderWidth: component.border.width,
  borderRadius: component.border.radius,
  itemPadding: {
    y: '.75rem',
    x: '1.25rem',
  },
  hover: {
    bg: colors.gray100,
  },
  active: {
    color: component.active.color,
    bg: component.active.bg,
    borderColor: component.active.bg,
  },
  disabled: {
    color: colors.gray600,
    bg: colors.white,
  },
  action: {
    color: colors.gray700,
    hover: {
      color: colors.gray700,
    },
    active: {
      color: body.color,
      bg: colors.gray200,
    },
  },
};

const theme = {
  colors,
  themeColors,
  themeColorLevels,
  elementColorLevels,
  getThemeColor,
  themeColorInterval,

  options,
  body,
  grid,
  component,
  inputBtn,
  link,
  listGroup,
  p: { marginBottom: '1rem' },
  print: {
    pageSize: 'a3',
    minWidth: grid.breakpoints.lg,
  },
  sizes: {
    25: '25%',
    50: '50%',
    100: '100%',
    auto: 'auto',
  },
  space: [
    0, 4, 8, 12, 16, 24, 32, 48, 64, 80, 104, 128,
  ],
  spacer,
  spacers,
  text,
  yiq,
  zIndex,
};

export default theme;
